import React, { useState, useEffect } from 'react'
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Alert, Modal, Dimensions } from 'react-native'
import { Ionicons } from '@expo/vector-icons'
import { useSelector } from 'react-redux'
import { RootState } from '../store/store'
import { useQuery } from 'react-query'

const { width } = Dimensions.get('window');

interface Vendor {
  id: string;
  name: string;
  rating: number;
  matchPercentage: number;
  cost: number;
  specialties: string[];
  deliveryTime: string;
  image?: string;
}

const SubscriptionScreen = () => {
  const [selectedPlan, setSelectedPlan] = useState('weekly')
  const [isSubscribed, setIsSubscribed] = useState(true)
  const [showPauseModal, setShowPauseModal] = useState(false)
  const [showDonationModal, setShowDonationModal] = useState(false)
  const [showVendorModal, setShowVendorModal] = useState(false)
  const [pauseStartDate, setPauseStartDate] = useState('')
  const [pauseEndDate, setPauseEndDate] = useState('')
  const [selectedVendor, setSelectedVendor] = useState<string>('')
  const user = useSelector((state: RootState) => state.auth.user)

  // Mock vendors data
  const vendors: Vendor[] = [
    {
      id: '1',
      name: 'Mama\'s Kitchen',
      rating: 4.8,
      matchPercentage: 95,
      cost: 500,
      specialties: ['North Indian', 'Punjabi', 'Vegetarian'],
      deliveryTime: '30-45 min',
      image: 'https://via.placeholder.com/100'
    },
    {
      id: '2',
      name: 'Spice Garden',
      rating: 4.6,
      matchPercentage: 88,
      cost: 450,
      specialties: ['South Indian', 'Kerala', 'Non-Vegetarian'],
      deliveryTime: '25-40 min',
      image: 'https://via.placeholder.com/100'
    },
    {
      id: '3',
      name: 'Home Cooked Delights',
      rating: 4.9,
      matchPercentage: 92,
      cost: 480,
      specialties: ['Gujarati', 'Rajasthani', 'Vegetarian'],
      deliveryTime: '35-50 min',
      image: 'https://via.placeholder.com/100'
    }
  ]

  const donationOrganizations = [
    { id: '1', name: 'Pephands Foundation', description: 'Feeding the hungry' },
    { id: '2', name: 'Khaana Chahiye Foundation', description: 'No one should sleep hungry' },
    { id: '3', name: 'The Breakfast Revolution', description: 'Ensuring morning nutrition' }
  ]

  const plans = [
    {
      id: 'daily',
      name: 'Daily Plan',
      price: 80,
      description: 'Fresh meals every day',
      features: ['Daily delivery', 'Flexible timing', 'Cancel anytime']
    },
    {
      id: 'weekly',
      name: 'Weekly Plan',
      price: 500,
      description: 'Best value for regular customers',
      features: ['7 days delivery', '10% discount', 'Priority support']
    },
    {
      id: 'monthly',
      name: 'Monthly Plan',
      price: 1800,
      description: 'Maximum savings',
      features: ['30 days delivery', '20% discount', 'Free delivery']
    }
  ]

  const handleSubscribe = () => {
    Alert.alert(
      'Subscribe',
      `Are you sure you want to subscribe to the ${plans.find(p => p.id === selectedPlan)?.name}?`,
      [
        { text: 'Cancel', style: 'cancel' },
        { text: 'Subscribe', onPress: () => setIsSubscribed(true) }
      ]
    )
  }

  const handlePause = () => {
    setShowPauseModal(true)
  }

  const handlePauseWithDonation = () => {
    setShowDonationModal(true)
  }

  const handleChangeVendor = () => {
    setShowVendorModal(true)
  }

  const handlePauseSubscription = () => {
    setShowPauseModal(false)
    Alert.alert('Success', 'Subscription paused successfully!')
  }

  const handleDonateMeal = (orgId: string) => {
    const org = donationOrganizations.find(o => o.id === orgId)
    setShowDonationModal(false)
    Alert.alert(
      'Thank You!', 
      `Your meal will be donated to ${org?.name}. Your kindness makes a difference!`
    )
  }

  const handleSelectVendor = (vendorId: string) => {
    setSelectedVendor(vendorId)
    setShowVendorModal(false)
    const vendor = vendors.find(v => v.id === vendorId)
    Alert.alert(
      'Vendor Changed', 
      `You've switched to ${vendor?.name}. Your subscription will be updated accordingly.`
    )
  }

  const handleCancel = () => {
    Alert.alert(
      'Cancel Subscription',
      'Are you sure you want to cancel your subscription?',
      [
        { text: 'Keep Subscription', style: 'cancel' },
        { text: 'Cancel', style: 'destructive', onPress: () => setIsSubscribed(false) }
      ]
    )
  }

  if (isSubscribed) {
    return (
      <ScrollView style={styles.container}>
        <View style={styles.header}>
          <View style={styles.statusCard}>
            <View style={styles.statusHeader}>
              <Ionicons name="checkmark-circle" size={24} color="#10b981" />
              <Text style={styles.statusTitle}>Active Subscription</Text>
            </View>
            <Text style={styles.statusDescription}>
              You're subscribed to the Weekly Plan
            </Text>
          </View>
        </View>

        <View style={styles.subscriptionDetails}>
          <Text style={styles.sectionTitle}>Subscription Details</Text>
          
          <View style={styles.detailItem}>
            <Text style={styles.detailLabel}>Plan</Text>
            <Text style={styles.detailValue}>Weekly Plan</Text>
          </View>
          
          <View style={styles.detailItem}>
            <Text style={styles.detailLabel}>Price</Text>
            <Text style={styles.detailValue}>₹500/week</Text>
          </View>
          
          <View style={styles.detailItem}>
            <Text style={styles.detailLabel}>Next Billing</Text>
            <Text style={styles.detailValue}>Dec 15, 2023</Text>
          </View>
          
          <View style={styles.detailItem}>
            <Text style={styles.detailLabel}>Status</Text>
            <Text style={[styles.detailValue, { color: '#10b981' }]}>Active</Text>
          </View>
        </View>

        {/* Current Vendor */}
        <View style={styles.vendorCard}>
          <Text style={styles.sectionTitle}>Current Vendor</Text>
          <View style={styles.vendorInfo}>
            <View style={styles.vendorLeft}>
              <View style={styles.vendorAvatar}>
                <Text style={styles.vendorAvatarText}>MK</Text>
              </View>
              <View style={styles.vendorDetails}>
                <Text style={styles.vendorName}>Mama's Kitchen</Text>
                <Text style={styles.vendorRating}>⭐ 4.8 • 95% match</Text>
                <Text style={styles.vendorSpecialties}>North Indian, Punjabi, Vegetarian</Text>
              </View>
            </View>
            <TouchableOpacity style={styles.changeVendorButton} onPress={handleChangeVendor}>
              <Text style={styles.changeVendorText}>Change</Text>
            </TouchableOpacity>
          </View>
        </View>

        <View style={styles.actionsContainer}>
          <TouchableOpacity style={styles.pauseButton} onPress={handlePause}>
            <Ionicons name="pause" size={20} color="#f59e0b" />
            <Text style={styles.pauseButtonText}>Pause Subscription</Text>
          </TouchableOpacity>
          
          <TouchableOpacity style={styles.donationButton} onPress={handlePauseWithDonation}>
            <Ionicons name="heart" size={20} color="#e91e63" />
            <Text style={styles.donationButtonText}>Pause & Donate</Text>
          </TouchableOpacity>
          
          <TouchableOpacity style={styles.cancelButton} onPress={handleCancel}>
            <Ionicons name="close-circle" size={20} color="#ef4444" />
            <Text style={styles.cancelButtonText}>Cancel Subscription</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    )
  }

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Choose Your Plan</Text>
        <Text style={styles.subtitle}>Select the perfect plan for your needs</Text>
      </View>

      <View style={styles.plansContainer}>
        {plans.map((plan) => (
          <TouchableOpacity
            key={plan.id}
            style={[
              styles.planCard,
              selectedPlan === plan.id && styles.selectedPlan
            ]}
            onPress={() => setSelectedPlan(plan.id)}
          >
            <View style={styles.planHeader}>
              <Text style={styles.planName}>{plan.name}</Text>
              <Text style={styles.planPrice}>₹{plan.price}</Text>
            </View>
            
            <Text style={styles.planDescription}>{plan.description}</Text>
            
            <View style={styles.featuresContainer}>
              {plan.features.map((feature, index) => (
                <View key={index} style={styles.featureItem}>
                  <Ionicons name="checkmark" size={16} color="#10b981" />
                  <Text style={styles.featureText}>{feature}</Text>
                </View>
              ))}
            </View>
            
            {selectedPlan === plan.id && (
              <View style={styles.selectedIndicator}>
                <Ionicons name="checkmark-circle" size={20} color="#0ea5e9" />
                <Text style={styles.selectedText}>Selected</Text>
              </View>
            )}
          </TouchableOpacity>
        ))}
      </View>

      <View style={styles.subscribeContainer}>
        <TouchableOpacity style={styles.subscribeButton} onPress={handleSubscribe}>
          <Text style={styles.subscribeButtonText}>
            Subscribe to {plans.find(p => p.id === selectedPlan)?.name}
          </Text>
        </TouchableOpacity>
      </View>

      {/* Pause Subscription Modal */}
      <Modal visible={showPauseModal} transparent animationType="slide">
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Pause Subscription</Text>
            <Text style={styles.modalText}>
              Your subscription will be paused. You can resume anytime.
            </Text>
            <View style={styles.modalButtons}>
              <TouchableOpacity 
                style={styles.modalButtonSecondary} 
                onPress={() => setShowPauseModal(false)}
              >
                <Text style={styles.modalButtonSecondaryText}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={styles.modalButtonPrimary} 
                onPress={handlePauseSubscription}
              >
                <Text style={styles.modalButtonPrimaryText}>Pause</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* Donation Modal */}
      <Modal visible={showDonationModal} transparent animationType="slide">
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Donate Your Meal</Text>
            <Text style={styles.modalText}>
              Choose an organization to donate your meal to:
            </Text>
            <View style={styles.donationOptions}>
              {donationOrganizations.map((org) => (
                <TouchableOpacity 
                  key={org.id} 
                  style={styles.donationOption}
                  onPress={() => handleDonateMeal(org.id)}
                >
                  <Ionicons name="heart" size={20} color="#E91E63" />
                  <View style={styles.donationOptionInfo}>
                    <Text style={styles.donationOptionName}>{org.name}</Text>
                    <Text style={styles.donationOptionDesc}>{org.description}</Text>
                  </View>
                </TouchableOpacity>
              ))}
            </View>
            <TouchableOpacity 
              style={styles.modalButtonSecondary} 
              onPress={() => setShowDonationModal(false)}
            >
              <Text style={styles.modalButtonSecondaryText}>Cancel</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

      {/* Vendor Selection Modal */}
      <Modal visible={showVendorModal} transparent animationType="slide">
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Choose Your Vendor</Text>
            <Text style={styles.modalText}>
              Select a vendor based on your preferences:
            </Text>
            <ScrollView style={styles.vendorList}>
              {vendors.map((vendor) => (
                <TouchableOpacity 
                  key={vendor.id} 
                  style={[
                    styles.vendorOption,
                    selectedVendor === vendor.id && styles.vendorOptionSelected
                  ]}
                  onPress={() => handleSelectVendor(vendor.id)}
                >
                  <View style={styles.vendorOptionLeft}>
                    <View style={styles.vendorOptionAvatar}>
                      <Text style={styles.vendorOptionAvatarText}>
                        {vendor.name.charAt(0)}
                      </Text>
                    </View>
                    <View style={styles.vendorOptionInfo}>
                      <Text style={styles.vendorOptionName}>{vendor.name}</Text>
                      <Text style={styles.vendorOptionRating}>
                        ⭐ {vendor.rating} • {vendor.matchPercentage}% match
                      </Text>
                      <Text style={styles.vendorOptionSpecialties}>
                        {vendor.specialties.join(', ')}
                      </Text>
                      <Text style={styles.vendorOptionCost}>
                        ₹{vendor.cost}/week • {vendor.deliveryTime}
                      </Text>
                    </View>
                  </View>
                  {selectedVendor === vendor.id && (
                    <Ionicons name="checkmark-circle" size={24} color="#3B82F6" />
                  )}
                </TouchableOpacity>
              ))}
            </ScrollView>
            <View style={styles.modalButtons}>
              <TouchableOpacity 
                style={styles.modalButtonSecondary} 
                onPress={() => setShowVendorModal(false)}
              >
                <Text style={styles.modalButtonSecondaryText}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={[styles.modalButtonPrimary, !selectedVendor && styles.modalButtonDisabled]} 
                onPress={() => selectedVendor && handleSelectVendor(selectedVendor)}
                disabled={!selectedVendor}
              >
                <Text style={styles.modalButtonPrimaryText}>Select Vendor</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </ScrollView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  header: {
    padding: 20,
    paddingTop: 40,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 4,
  },
  subtitle: {
    fontSize: 16,
    color: '#64748b',
  },
  statusCard: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  statusHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  statusTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1e293b',
    marginLeft: 8,
  },
  statusDescription: {
    fontSize: 14,
    color: '#64748b',
  },
  subscriptionDetails: {
    backgroundColor: 'white',
    margin: 20,
    padding: 20,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1e293b',
    marginBottom: 16,
  },
  detailItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 12,
  },
  detailLabel: {
    fontSize: 14,
    color: '#64748b',
  },
  detailValue: {
    fontSize: 14,
    fontWeight: '500',
    color: '#1e293b',
  },
  actionsContainer: {
    padding: 20,
  },
  pauseButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#fef3c7',
    padding: 16,
    borderRadius: 8,
    marginBottom: 12,
  },
  pauseButtonText: {
    color: '#f59e0b',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
  cancelButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#fee2e2',
    padding: 16,
    borderRadius: 8,
  },
  cancelButtonText: {
    color: '#ef4444',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
  plansContainer: {
    padding: 20,
  },
  planCard: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 12,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  selectedPlan: {
    borderWidth: 2,
    borderColor: '#0ea5e9',
  },
  planHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  planName: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1e293b',
  },
  planPrice: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#0ea5e9',
  },
  planDescription: {
    fontSize: 14,
    color: '#64748b',
    marginBottom: 16,
  },
  featuresContainer: {
    marginBottom: 16,
  },
  featureItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  featureText: {
    fontSize: 14,
    color: '#64748b',
    marginLeft: 8,
  },
  selectedIndicator: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#f0f9ff',
    padding: 8,
    borderRadius: 6,
  },
  selectedText: {
    color: '#0ea5e9',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 4,
  },
  subscribeContainer: {
    padding: 20,
  },
  subscribeButton: {
    backgroundColor: '#0ea5e9',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
  },
  subscribeButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  vendorCard: {
    backgroundColor: 'white',
    margin: 20,
    padding: 20,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  vendorInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  vendorLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  vendorAvatar: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#3B82F6',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  vendorAvatarText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  vendorDetails: {
    flex: 1,
  },
  vendorName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 4,
  },
  vendorRating: {
    fontSize: 14,
    color: '#6b7280',
    marginBottom: 4,
  },
  vendorSpecialties: {
    fontSize: 12,
    color: '#9ca3af',
  },
  changeVendorButton: {
    backgroundColor: '#f3f4f6',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 6,
  },
  changeVendorText: {
    color: '#3b82f6',
    fontSize: 14,
    fontWeight: '600',
  },
  donationButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#fce7f3',
    padding: 16,
    borderRadius: 8,
    marginBottom: 12,
  },
  donationButtonText: {
    color: '#e91e63',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 24,
    margin: 20,
    width: width - 40,
    maxWidth: 400,
    maxHeight: '80%',
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 12,
    textAlign: 'center',
  },
  modalText: {
    fontSize: 16,
    color: '#6b7280',
    textAlign: 'center',
    marginBottom: 24,
    lineHeight: 22,
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 12,
  },
  modalButtonPrimary: {
    flex: 1,
    backgroundColor: '#3b82f6',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: 'center',
  },
  modalButtonPrimaryText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
  },
  modalButtonSecondary: {
    flex: 1,
    backgroundColor: '#f3f4f6',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: 'center',
  },
  modalButtonSecondaryText: {
    color: '#6b7280',
    fontWeight: '600',
    fontSize: 16,
  },
  modalButtonDisabled: {
    backgroundColor: '#9ca3af',
  },
  donationOptions: {
    marginBottom: 24,
  },
  donationOption: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#f8fafc',
    borderRadius: 8,
    marginBottom: 8,
  },
  donationOptionInfo: {
    marginLeft: 12,
    flex: 1,
  },
  donationOptionName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1e293b',
    marginBottom: 4,
  },
  donationOptionDesc: {
    fontSize: 14,
    color: '#6b7280',
  },
  vendorList: {
    maxHeight: 300,
    marginBottom: 24,
  },
  vendorOption: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 16,
    backgroundColor: '#f8fafc',
    borderRadius: 8,
    marginBottom: 8,
  },
  vendorOptionSelected: {
    backgroundColor: '#f0f9ff',
    borderWidth: 2,
    borderColor: '#3b82f6',
  },
  vendorOptionLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  vendorOptionAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#3b82f6',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  vendorOptionAvatarText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  vendorOptionInfo: {
    flex: 1,
  },
  vendorOptionName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 4,
  },
  vendorOptionRating: {
    fontSize: 14,
    color: '#6b7280',
    marginBottom: 4,
  },
  vendorOptionSpecialties: {
    fontSize: 12,
    color: '#9ca3af',
    marginBottom: 4,
  },
  vendorOptionCost: {
    fontSize: 12,
    color: '#3b82f6',
    fontWeight: '600',
  },
})

export default SubscriptionScreen
