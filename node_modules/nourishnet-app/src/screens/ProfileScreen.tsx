import React, { useState } from 'react'
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Alert, Modal, TextInput, Switch, Dimensions } from 'react-native'
import { Ionicons } from '@expo/vector-icons'
import { useSelector, useDispatch } from 'react-redux'
import { RootState } from '../store/store'
import { logout } from '../store/slices/authSlice'

const { width } = Dimensions.get('window');

interface Address {
  id: string;
  type: 'home' | 'office' | 'other';
  name: string;
  address: string;
  coordinates: {
    lat: number;
    lng: number;
  };
  isDefault: boolean;
}

interface Preference {
  key: string;
  label: string;
  value: any;
  type: 'boolean' | 'select' | 'text';
  options?: string[];
}

const ProfileScreen = () => {
  const { user } = useSelector((state: RootState) => state.auth)
  const dispatch = useDispatch()
  const [showAddressModal, setShowAddressModal] = useState(false)
  const [showPreferencesModal, setShowPreferencesModal] = useState(false)
  const [showVendorModal, setShowVendorModal] = useState(false)
  const [selectedAddress, setSelectedAddress] = useState<Address | null>(null)
  const [newAddress, setNewAddress] = useState<{ name: string; address: string; type: 'home' | 'office' | 'other' }>({ name: '', address: '', type: 'home' })

  // Mock data
  const addresses: Address[] = [
    {
      id: '1',
      type: 'home',
      name: 'Home',
      address: '123 Main Street, Mumbai, Maharashtra 400001',
      coordinates: { lat: 19.0760, lng: 72.8777 },
      isDefault: true
    },
    {
      id: '2',
      type: 'office',
      name: 'Office',
      address: '456 Business Avenue, Mumbai, Maharashtra 400002',
      coordinates: { lat: 19.0740, lng: 72.8757 },
      isDefault: false
    }
  ]

  const preferences: Preference[] = [
    { key: 'veg', label: 'Vegetarian', value: true, type: 'boolean' },
    { key: 'spiceLevel', label: 'Spice Level', value: 'medium', type: 'select', options: ['mild', 'medium', 'hot'] },
    { key: 'allergies', label: 'Allergies', value: 'None', type: 'text' },
    { key: 'portionSize', label: 'Portion Size', value: 'regular', type: 'select', options: ['small', 'regular', 'large'] },
    { key: 'notifications', label: 'Push Notifications', value: true, type: 'boolean' },
    { key: 'emailUpdates', label: 'Email Updates', value: false, type: 'boolean' }
  ]

  const availableVendors = [
    {
      id: '1',
      name: 'Mama\'s Kitchen',
      rating: 4.8,
      matchPercentage: 95,
      specialties: ['North Indian', 'Punjabi'],
      cost: 500,
      deliveryTime: '30-45 min'
    },
    {
      id: '2',
      name: 'Spice Garden',
      rating: 4.6,
      matchPercentage: 88,
      specialties: ['South Indian', 'Kerala'],
      cost: 450,
      deliveryTime: '25-40 min'
    }
  ]

  const handleLogout = () => {
    Alert.alert(
      'Logout',
      'Are you sure you want to logout?',
      [
        { text: 'Cancel', style: 'cancel' },
        { text: 'Logout', style: 'destructive', onPress: () => dispatch(logout()) }
      ]
    )
  }

  const handleAddAddress = () => {
    setSelectedAddress(null)
    setNewAddress({ name: '', address: '', type: 'home' })
    setShowAddressModal(true)
  }

  const handleEditAddress = (address: Address) => {
    setSelectedAddress(address)
    setNewAddress({ name: address.name, address: address.address, type: address.type })
    setShowAddressModal(true)
  }

  const handleSaveAddress = () => {
    if (!newAddress.name || !newAddress.address) {
      Alert.alert('Error', 'Please fill in all fields')
      return
    }
    setShowAddressModal(false)
    Alert.alert('Success', 'Address saved successfully!')
  }

  const handleChangeVendor = () => {
    setShowVendorModal(true)
  }

  const handleSelectVendor = (vendorId: string) => {
    setShowVendorModal(false)
    const vendor = availableVendors.find(v => v.id === vendorId)
    Alert.alert('Success', `Switched to ${vendor?.name}`)
  }

  const menuItems = [
    {
      title: 'Personal Information',
      icon: 'person',
      onPress: () => Alert.alert('Coming Soon', 'Personal information editing will be available soon')
    },
    {
      title: 'Delivery Addresses',
      icon: 'location',
      onPress: () => setShowAddressModal(true)
    },
    {
      title: 'Meal Preferences',
      icon: 'restaurant',
      onPress: () => setShowPreferencesModal(true)
    },
    {
      title: 'Change Vendor',
      icon: 'storefront',
      onPress: handleChangeVendor
    },
    {
      title: 'Payment Methods',
      icon: 'card',
      onPress: () => Alert.alert('Coming Soon', 'Payment methods will be available in the Payments tab')
    },
    {
      title: 'Order History',
      icon: 'time',
      onPress: () => Alert.alert('Coming Soon', 'Order history will be available soon')
    },
    {
      title: 'Notification Settings',
      icon: 'notifications',
      onPress: () => setShowPreferencesModal(true)
    },
    {
      title: 'Help & Support',
      icon: 'help-circle',
      onPress: () => Alert.alert('Support', 'Contact us at support@nourishnet.com')
    },
    {
      title: 'About',
      icon: 'information-circle',
      onPress: () => Alert.alert('About NourishNet', 'Version 1.0.0\nBuilt with ❤️ for better nutrition')
    }
  ]

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <View style={styles.avatar}>
          <Text style={styles.avatarText}>
            {user?.name?.charAt(0).toUpperCase()}
          </Text>
        </View>
        <Text style={styles.name}>{user?.name}</Text>
        <Text style={styles.email}>{user?.email}</Text>
      </View>

      <View style={styles.statsContainer}>
        <View style={styles.statItem}>
          <Text style={styles.statNumber}>12</Text>
          <Text style={styles.statLabel}>Orders</Text>
        </View>
        <View style={styles.statItem}>
          <Text style={styles.statNumber}>4.8</Text>
          <Text style={styles.statLabel}>Rating</Text>
        </View>
        <View style={styles.statItem}>
          <Text style={styles.statNumber}>30</Text>
          <Text style={styles.statLabel}>Days</Text>
        </View>
      </View>

      {/* Saved Addresses */}
      <View style={styles.addressesContainer}>
        <View style={styles.addressesHeader}>
          <Text style={styles.addressesTitle}>Saved Addresses</Text>
          <TouchableOpacity onPress={handleAddAddress}>
            <Ionicons name="add-circle" size={24} color="#0ea5e9" />
          </TouchableOpacity>
        </View>
        {addresses.map((address) => (
          <View key={address.id} style={styles.addressItem}>
            <View style={styles.addressLeft}>
              <Ionicons 
                name={address.type === 'home' ? 'home' : address.type === 'office' ? 'business' : 'location'} 
                size={20} 
                color="#0ea5e9" 
              />
              <View style={styles.addressInfo}>
                <Text style={styles.addressName}>{address.name}</Text>
                <Text style={styles.addressText}>{address.address}</Text>
                {address.isDefault && (
                  <Text style={styles.defaultAddressText}>Default</Text>
                )}
              </View>
            </View>
            <TouchableOpacity onPress={() => handleEditAddress(address)}>
              <Ionicons name="create" size={20} color="#64748b" />
            </TouchableOpacity>
          </View>
        ))}
      </View>

      <View style={styles.menuContainer}>
        {menuItems.map((item, index) => (
          <TouchableOpacity
            key={index}
            style={styles.menuItem}
            onPress={item.onPress}
          >
            <View style={styles.menuItemLeft}>
              <Ionicons name={item.icon as any} size={20} color="#64748b" />
              <Text style={styles.menuItemText}>{item.title}</Text>
            </View>
            <Ionicons name="chevron-forward" size={16} color="#94a3b8" />
          </TouchableOpacity>
        ))}
      </View>

      <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
        <Ionicons name="log-out" size={20} color="#ef4444" />
        <Text style={styles.logoutText}>Logout</Text>
      </TouchableOpacity>

      {/* Address Modal */}
      <Modal visible={showAddressModal} transparent animationType="slide">
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>
              {selectedAddress ? 'Edit Address' : 'Add New Address'}
            </Text>
            
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Address Name</Text>
              <TextInput
                style={styles.textInput}
                value={newAddress.name}
                onChangeText={(text) => setNewAddress({...newAddress, name: text})}
                placeholder="e.g., Home, Office"
                placeholderTextColor="#9CA3AF"
              />
            </View>

            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Full Address</Text>
              <TextInput
                style={[styles.textInput, styles.textArea]}
                value={newAddress.address}
                onChangeText={(text) => setNewAddress({...newAddress, address: text})}
                placeholder="Enter complete address"
                placeholderTextColor="#9CA3AF"
                multiline
                numberOfLines={3}
              />
            </View>

            <View style={styles.modalButtons}>
              <TouchableOpacity 
                style={styles.modalButtonSecondary} 
                onPress={() => setShowAddressModal(false)}
              >
                <Text style={styles.modalButtonSecondaryText}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={styles.modalButtonPrimary} 
                onPress={handleSaveAddress}
              >
                <Text style={styles.modalButtonPrimaryText}>Save</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* Preferences Modal */}
      <Modal visible={showPreferencesModal} transparent animationType="slide">
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Meal Preferences</Text>
            
            <ScrollView style={styles.preferencesList}>
              {preferences.map((pref, index) => (
                <View key={index} style={styles.preferenceItem}>
                  <Text style={styles.preferenceLabel}>{pref.label}</Text>
                  {pref.type === 'boolean' ? (
                    <Switch
                      value={pref.value}
                      onValueChange={(value) => console.log(`${pref.key}: ${value}`)}
                      trackColor={{ false: '#E5E7EB', true: '#3B82F6' }}
                      thumbColor={pref.value ? '#FFFFFF' : '#F3F4F6'}
                    />
                  ) : (
                    <Text style={styles.preferenceValue}>{pref.value}</Text>
                  )}
                </View>
              ))}
            </ScrollView>

            <TouchableOpacity 
              style={styles.modalButtonPrimary} 
              onPress={() => setShowPreferencesModal(false)}
            >
              <Text style={styles.modalButtonPrimaryText}>Save Preferences</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

      {/* Vendor Selection Modal */}
      <Modal visible={showVendorModal} transparent animationType="slide">
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Choose Your Vendor</Text>
            <Text style={styles.modalText}>Select a vendor based on your preferences:</Text>
            
            <ScrollView style={styles.vendorList}>
              {availableVendors.map((vendor) => (
                <TouchableOpacity 
                  key={vendor.id} 
                  style={styles.vendorOption}
                  onPress={() => handleSelectVendor(vendor.id)}
                >
                  <View style={styles.vendorOptionLeft}>
                    <View style={styles.vendorAvatar}>
                      <Text style={styles.vendorAvatarText}>
                        {vendor.name.charAt(0)}
                      </Text>
                    </View>
                    <View style={styles.vendorInfo}>
                      <Text style={styles.vendorName}>{vendor.name}</Text>
                      <Text style={styles.vendorRating}>
                        ⭐ {vendor.rating} • {vendor.matchPercentage}% match
                      </Text>
                      <Text style={styles.vendorSpecialties}>
                        {vendor.specialties.join(', ')}
                      </Text>
                      <Text style={styles.vendorCost}>
                        ₹{vendor.cost}/week • {vendor.deliveryTime}
                      </Text>
                    </View>
                  </View>
                </TouchableOpacity>
              ))}
            </ScrollView>

            <TouchableOpacity 
              style={styles.modalButtonSecondary} 
              onPress={() => setShowVendorModal(false)}
            >
              <Text style={styles.modalButtonSecondaryText}>Cancel</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </ScrollView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  header: {
    alignItems: 'center',
    padding: 20,
    paddingTop: 40,
    backgroundColor: 'white',
  },
  avatar: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: '#0ea5e9',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 16,
  },
  avatarText: {
    fontSize: 32,
    fontWeight: 'bold',
    color: 'white',
  },
  name: {
    fontSize: 20,
    fontWeight: '600',
    color: '#1e293b',
    marginBottom: 4,
  },
  email: {
    fontSize: 14,
    color: '#64748b',
  },
  statsContainer: {
    flexDirection: 'row',
    backgroundColor: 'white',
    margin: 20,
    borderRadius: 12,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  statItem: {
    flex: 1,
    alignItems: 'center',
  },
  statNumber: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#0ea5e9',
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: '#64748b',
  },
  menuContainer: {
    backgroundColor: 'white',
    margin: 20,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  menuItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#f1f5f9',
  },
  menuItemLeft: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  menuItemText: {
    fontSize: 16,
    color: '#1e293b',
    marginLeft: 12,
  },
  logoutButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'white',
    margin: 20,
    padding: 16,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  logoutText: {
    fontSize: 16,
    color: '#ef4444',
    marginLeft: 8,
    fontWeight: '600',
  },
  addressesContainer: {
    backgroundColor: 'white',
    margin: 20,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  addressesHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#f1f5f9',
  },
  addressesTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1e293b',
  },
  addressItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#f1f5f9',
  },
  addressLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  addressInfo: {
    marginLeft: 12,
    flex: 1,
  },
  addressName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1e293b',
    marginBottom: 4,
  },
  addressText: {
    fontSize: 14,
    color: '#64748b',
    marginBottom: 4,
  },
  defaultAddressText: {
    fontSize: 12,
    color: '#10b981',
    fontWeight: '600',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 24,
    margin: 20,
    width: width - 40,
    maxWidth: 400,
    maxHeight: '80%',
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 20,
    textAlign: 'center',
  },
  modalText: {
    fontSize: 16,
    color: '#6b7280',
    textAlign: 'center',
    marginBottom: 20,
    lineHeight: 22,
  },
  inputContainer: {
    marginBottom: 16,
  },
  inputLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 8,
  },
  textInput: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    color: '#1f2937',
    backgroundColor: '#ffffff',
  },
  textArea: {
    height: 80,
    textAlignVertical: 'top',
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 12,
    marginTop: 20,
  },
  modalButtonPrimary: {
    flex: 1,
    backgroundColor: '#0ea5e9',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: 'center',
  },
  modalButtonPrimaryText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
  },
  modalButtonSecondary: {
    flex: 1,
    backgroundColor: '#f3f4f6',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: 'center',
  },
  modalButtonSecondaryText: {
    color: '#6b7280',
    fontWeight: '600',
    fontSize: 16,
  },
  preferencesList: {
    maxHeight: 300,
    marginBottom: 20,
  },
  preferenceItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#f1f5f9',
  },
  preferenceLabel: {
    fontSize: 16,
    color: '#1e293b',
    flex: 1,
  },
  preferenceValue: {
    fontSize: 16,
    color: '#6b7280',
    fontWeight: '500',
  },
  vendorList: {
    maxHeight: 300,
    marginBottom: 20,
  },
  vendorOption: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#f8fafc',
    borderRadius: 8,
    marginBottom: 8,
  },
  vendorOptionLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  vendorAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#0ea5e9',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  vendorAvatarText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  vendorInfo: {
    flex: 1,
  },
  vendorName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 4,
  },
  vendorRating: {
    fontSize: 14,
    color: '#6b7280',
    marginBottom: 4,
  },
  vendorSpecialties: {
    fontSize: 12,
    color: '#9ca3af',
    marginBottom: 4,
  },
  vendorCost: {
    fontSize: 12,
    color: '#0ea5e9',
    fontWeight: '600',
  },
})

export default ProfileScreen
