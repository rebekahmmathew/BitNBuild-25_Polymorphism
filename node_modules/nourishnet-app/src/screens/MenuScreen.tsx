import React, { useState, useEffect } from 'react'
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Image, Dimensions, Alert } from 'react-native'
import { Ionicons } from '@expo/vector-icons'
import { useQuery } from 'react-query'
import { useSelector } from 'react-redux'
import { RootState } from '../store/store'

const { width } = Dimensions.get('window');

interface MenuItem {
  id: string;
  name: string;
  description: string;
  price: number;
  category: string;
  isVeg: boolean;
  image?: string;
  nutritionalInfo?: {
    calories: number;
    protein: number;
    carbs: number;
    fat: number;
  };
  allergens?: string[];
  spiceLevel?: 'mild' | 'medium' | 'hot';
}

const MenuScreen = () => {
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [selectedItems, setSelectedItems] = useState<{[key: string]: number}>({});
  const [showPreferences, setShowPreferences] = useState(false);
  const user = useSelector((state: RootState) => state.auth.user);

  // Fetch weekly menu
  const { data: menuData, isLoading: menuLoading, refetch: refetchMenu } = useQuery(
    'weekly-menu',
    async () => {
      const response = await fetch('http://localhost:3001/api/menus/weekly', {
        headers: { 'x-user-id': user?.id || 'consumer_1' }
      });
      return response.json();
    }
  );

  const menuItems: MenuItem[] = [
    {
      id: '1',
      name: 'Dal Rice',
      description: 'Fresh dal with basmati rice',
      price: 80,
      category: 'main',
      isVeg: true,
      nutritionalInfo: { calories: 350, protein: 12, carbs: 45, fat: 8 },
      allergens: ['gluten'],
      spiceLevel: 'mild'
    },
    {
      id: '2',
      name: 'Chicken Curry',
      description: 'Spicy chicken curry with roti',
      price: 120,
      category: 'main',
      isVeg: false,
      nutritionalInfo: { calories: 420, protein: 25, carbs: 35, fat: 15 },
      allergens: ['gluten'],
      spiceLevel: 'hot'
    },
    {
      id: '3',
      name: 'Vegetable Sabzi',
      description: 'Mixed vegetables with spices',
      price: 60,
      category: 'side',
      isVeg: true,
      nutritionalInfo: { calories: 180, protein: 6, carbs: 20, fat: 8 },
      allergens: [],
      spiceLevel: 'medium'
    },
    {
      id: '4',
      name: 'Raita',
      description: 'Fresh yogurt with cucumber',
      price: 30,
      category: 'side',
      isVeg: true,
      nutritionalInfo: { calories: 80, protein: 4, carbs: 8, fat: 3 },
      allergens: ['dairy'],
      spiceLevel: 'mild'
    }
  ];

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'main':
        return 'restaurant'
      case 'side':
        return 'leaf'
      case 'dessert':
        return 'ice-cream'
      default:
        return 'restaurant'
    }
  }

  const getSpiceLevelColor = (level: string) => {
    switch (level) {
      case 'mild': return '#10B981'
      case 'medium': return '#F59E0B'
      case 'hot': return '#EF4444'
      default: return '#6B7280'
    }
  }

  const getSpiceLevelIcon = (level: string) => {
    switch (level) {
      case 'mild': return 'leaf'
      case 'medium': return 'flame'
      case 'hot': return 'flame'
      default: return 'leaf'
    }
  }

  const handleQuantityChange = (itemId: string, change: number) => {
    setSelectedItems(prev => {
      const current = prev[itemId] || 0
      const newQuantity = Math.max(0, current + change)
      if (newQuantity === 0) {
        const { [itemId]: removed, ...rest } = prev
        return rest
      }
      return { ...prev, [itemId]: newQuantity }
    })
  }

  const calculateTotal = () => {
    return Object.entries(selectedItems).reduce((total, [itemId, quantity]) => {
      const item = menuItems.find(i => i.id === itemId)
      return total + (item ? item.price * quantity : 0)
    }, 0)
  }

  const handlePlaceOrder = () => {
    const total = calculateTotal()
    if (total === 0) {
      Alert.alert('Empty Cart', 'Please select at least one item to place an order.')
      return
    }
    
    Alert.alert(
      'Confirm Order',
      `Total: ₹${total}\n\nYour order will be prepared and delivered as per your subscription schedule.`,
      [
        { text: 'Cancel', style: 'cancel' },
        { text: 'Place Order', onPress: () => {
          Alert.alert('Success', 'Order placed successfully!')
          setSelectedItems({})
        }}
      ]
    )
  }

  const getWeekDays = () => {
    const today = new Date()
    const days = []
    for (let i = 0; i < 7; i++) {
      const date = new Date(today)
      date.setDate(today.getDate() + i)
      days.push(date)
    }
    return days
  }

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('en-US', { weekday: 'short', day: 'numeric' })
  }

  const isToday = (date: Date) => {
    const today = new Date()
    return date.toDateString() === today.toDateString()
  }

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Weekly Menu</Text>
        <Text style={styles.subtitle}>Plan your meals for the week</Text>
      </View>

      {/* Weekly Calendar */}
      <View style={styles.calendarContainer}>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          {getWeekDays().map((date, index) => (
            <TouchableOpacity
              key={index}
              style={[
                styles.calendarDay,
                isToday(date) && styles.calendarDayToday,
                selectedDate.toDateString() === date.toDateString() && styles.calendarDaySelected
              ]}
              onPress={() => setSelectedDate(date)}
            >
              <Text style={[
                styles.calendarDayText,
                isToday(date) && styles.calendarDayTextToday,
                selectedDate.toDateString() === date.toDateString() && styles.calendarDayTextSelected
              ]}>
                {formatDate(date)}
              </Text>
              {isToday(date) && (
                <View style={styles.todayIndicator} />
              )}
            </TouchableOpacity>
          ))}
        </ScrollView>
      </View>

      {/* Preferences Button */}
      <View style={styles.preferencesContainer}>
        <TouchableOpacity 
          style={styles.preferencesButton}
          onPress={() => setShowPreferences(!showPreferences)}
        >
          <Ionicons name="settings" size={20} color="#3B82F6" />
          <Text style={styles.preferencesButtonText}>Dish Preferences</Text>
          <Ionicons 
            name={showPreferences ? "chevron-up" : "chevron-down"} 
            size={16} 
            color="#6B7280" 
          />
        </TouchableOpacity>
      </View>

      <View style={styles.menuGrid}>
        {menuItems.map((item) => (
          <View key={item.id} style={styles.menuItem}>
            <View style={styles.itemImage}>
              <Ionicons name="restaurant" size={40} color="#64748b" />
            </View>
            
            <View style={styles.itemContent}>
              <View style={styles.itemHeader}>
                <Text style={styles.itemName}>{item.name}</Text>
                <View style={styles.itemBadges}>
                  {item.isVeg && (
                    <View style={styles.vegBadge}>
                      <Text style={styles.vegText}>VEG</Text>
                    </View>
                  )}
                  {item.spiceLevel && (
                    <View style={[styles.spiceBadge, { backgroundColor: getSpiceLevelColor(item.spiceLevel) + '20' }]}>
                      <Ionicons 
                        name={getSpiceLevelIcon(item.spiceLevel) as any} 
                        size={12} 
                        color={getSpiceLevelColor(item.spiceLevel)} 
                      />
                      <Text style={[styles.spiceText, { color: getSpiceLevelColor(item.spiceLevel) }]}>
                        {item.spiceLevel.toUpperCase()}
                      </Text>
                    </View>
                  )}
                  <View style={styles.categoryBadge}>
                    <Ionicons 
                      name={getCategoryIcon(item.category) as any} 
                      size={12} 
                      color="#64748b" 
                    />
                    <Text style={styles.categoryText}>
                      {item.category.toUpperCase()}
                    </Text>
                  </View>
                </View>
              </View>
              
              <Text style={styles.itemDescription}>{item.description}</Text>
              
              {/* Nutritional Info */}
              {item.nutritionalInfo && (
                <View style={styles.nutritionalInfo}>
                  <Text style={styles.nutritionalText}>
                    {item.nutritionalInfo.calories} cal • {item.nutritionalInfo.protein}g protein
                  </Text>
                </View>
              )}
              
              {/* Allergens */}
              {item.allergens && item.allergens.length > 0 && (
                <View style={styles.allergensContainer}>
                  <Ionicons name="warning" size={12} color="#F59E0B" />
                  <Text style={styles.allergensText}>
                    Contains: {item.allergens.join(', ')}
                  </Text>
                </View>
              )}
              
              <View style={styles.itemFooter}>
                <Text style={styles.itemPrice}>₹{item.price}</Text>
                <View style={styles.quantityControls}>
                  {selectedItems[item.id] > 0 && (
                    <TouchableOpacity 
                      style={styles.quantityButton}
                      onPress={() => handleQuantityChange(item.id, -1)}
                    >
                      <Ionicons name="remove" size={16} color="#3B82F6" />
                    </TouchableOpacity>
                  )}
                  {selectedItems[item.id] > 0 && (
                    <Text style={styles.quantityText}>{selectedItems[item.id]}</Text>
                  )}
                  <TouchableOpacity 
                    style={styles.addButton}
                    onPress={() => handleQuantityChange(item.id, 1)}
                  >
                    <Ionicons name="add" size={20} color="white" />
                  </TouchableOpacity>
                </View>
              </View>
            </View>
          </View>
        ))}
      </View>

      <View style={styles.summaryCard}>
        <Text style={styles.summaryTitle}>Order Summary</Text>
        <View style={styles.summaryItem}>
          <Text style={styles.summaryLabel}>Subtotal</Text>
          <Text style={styles.summaryValue}>₹{calculateTotal()}</Text>
        </View>
        <View style={styles.summaryItem}>
          <Text style={styles.summaryLabel}>Delivery</Text>
          <Text style={styles.summaryValue}>Free</Text>
        </View>
        <View style={styles.summaryDivider} />
        <View style={styles.summaryItem}>
          <Text style={styles.summaryTotal}>Total</Text>
          <Text style={styles.summaryTotalValue}>₹{calculateTotal()}</Text>
        </View>
        
        <TouchableOpacity 
          style={[styles.orderButton, calculateTotal() === 0 && styles.orderButtonDisabled]}
          onPress={handlePlaceOrder}
          disabled={calculateTotal() === 0}
        >
          <Text style={styles.orderButtonText}>
            {calculateTotal() === 0 ? 'Add Items to Order' : 'Place Order'}
          </Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  header: {
    padding: 20,
    paddingTop: 40,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 4,
  },
  subtitle: {
    fontSize: 16,
    color: '#64748b',
  },
  menuGrid: {
    padding: 20,
  },
  menuItem: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    flexDirection: 'row',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  itemImage: {
    width: 60,
    height: 60,
    backgroundColor: '#f1f5f9',
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 16,
  },
  itemContent: {
    flex: 1,
  },
  itemHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 4,
  },
  itemName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1e293b',
    flex: 1,
  },
  itemBadges: {
    flexDirection: 'row',
    gap: 8,
  },
  vegBadge: {
    backgroundColor: '#10b981',
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 4,
  },
  vegText: {
    color: 'white',
    fontSize: 10,
    fontWeight: '600',
  },
  categoryBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f1f5f9',
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 4,
  },
  categoryText: {
    color: '#64748b',
    fontSize: 10,
    fontWeight: '600',
    marginLeft: 4,
  },
  itemDescription: {
    fontSize: 14,
    color: '#64748b',
    marginBottom: 12,
  },
  itemFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  itemPrice: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#0ea5e9',
  },
  addButton: {
    backgroundColor: '#0ea5e9',
    width: 32,
    height: 32,
    borderRadius: 16,
    alignItems: 'center',
    justifyContent: 'center',
  },
  summaryCard: {
    margin: 20,
    padding: 20,
    backgroundColor: 'white',
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  summaryTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1e293b',
    marginBottom: 16,
  },
  summaryItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  summaryLabel: {
    fontSize: 14,
    color: '#64748b',
  },
  summaryValue: {
    fontSize: 14,
    color: '#1e293b',
    fontWeight: '500',
  },
  summaryDivider: {
    height: 1,
    backgroundColor: '#e2e8f0',
    marginVertical: 12,
  },
  summaryTotal: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1e293b',
  },
  summaryTotalValue: {
    fontSize: 16,
    fontWeight: '600',
    color: '#0ea5e9',
  },
  orderButton: {
    backgroundColor: '#0ea5e9',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 16,
  },
  orderButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  orderButtonDisabled: {
    backgroundColor: '#9CA3AF',
  },
  calendarContainer: {
    backgroundColor: 'white',
    margin: 20,
    borderRadius: 12,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  calendarDay: {
    alignItems: 'center',
    padding: 12,
    marginRight: 8,
    borderRadius: 8,
    minWidth: 60,
    position: 'relative',
  },
  calendarDayToday: {
    backgroundColor: '#F0F9FF',
  },
  calendarDaySelected: {
    backgroundColor: '#3B82F6',
  },
  calendarDayText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#6B7280',
  },
  calendarDayTextToday: {
    color: '#3B82F6',
  },
  calendarDayTextSelected: {
    color: 'white',
  },
  todayIndicator: {
    position: 'absolute',
    top: 4,
    right: 4,
    width: 6,
    height: 6,
    borderRadius: 3,
    backgroundColor: '#3B82F6',
  },
  preferencesContainer: {
    marginHorizontal: 20,
    marginBottom: 20,
  },
  preferencesButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'white',
    padding: 16,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  preferencesButtonText: {
    flex: 1,
    marginLeft: 12,
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  spiceBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 4,
    marginLeft: 4,
  },
  spiceText: {
    fontSize: 10,
    fontWeight: '600',
    marginLeft: 4,
  },
  nutritionalInfo: {
    marginTop: 8,
    marginBottom: 4,
  },
  nutritionalText: {
    fontSize: 12,
    color: '#6B7280',
    fontWeight: '500',
  },
  allergensContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 4,
  },
  allergensText: {
    fontSize: 11,
    color: '#F59E0B',
    marginLeft: 4,
    fontWeight: '500',
  },
  quantityControls: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  quantityButton: {
    width: 28,
    height: 28,
    borderRadius: 14,
    backgroundColor: '#F3F4F6',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 8,
  },
  quantityText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
    marginRight: 8,
    minWidth: 20,
    textAlign: 'center',
  },
})

export default MenuScreen
